[["transforming-posterior-samples.html", "5 Transforming posterior samples 5.1 Binomial model 5.2 Beta zero one inflated model", " 5 Transforming posterior samples 5.1 Binomial model Letâ€™s first try something relatively easy: a binomial model with one random effect. We first generate data: library(brms) set.seed(456) N &lt;- 50 Ni &lt;- 10 x &lt;- rnorm(N) id &lt;- sample(Ni,N,replace=TRUE) id.f &lt;- factor(id) id.vals &lt;- rnorm(Ni) lin.y &lt;- x + id.vals[id] p.y &lt;- plogis(lin.y) y &lt;- rbinom(N,1,p.y) d &lt;- data.frame(x=x,y=y,id=id.f) And then proceed with the analysis: # 1. A bernoulli model with random effect m1 &lt;- brm(y~x+(1|id),family=bernoulli, warmup=1000, iter=2000, data=d, backend=&quot;cmdstanr&quot;, file=&quot;BRMS_bernoulli&quot;) # data points for which we want predictions: newdat &lt;- data.frame(x=c(0.3,0.4),id=&#39;1&#39;) # predictions on linear scale m1.fit.lin &lt;- fitted(m1,summary=FALSE,newdata=newdat,scale = &#39;linear&#39;,re_formula=NA) # define a function for getting estimate, se and 95% CI sum.fun &lt;- function(x) c(mu=mean(x),sd=sd(x),quantile(x,probs=c(0.025,0.975))) # apply function for each row in newdat t(apply(plogis(m1.fit.lin),2,sum.fun)) ## mu sd 2.5% 97.5% ## [1,] 0.5661154 0.1563952 0.2212366 0.8396047 ## [2,] 0.5958201 0.1562524 0.2413899 0.8598464 # taking them directly from brms fitted(m1,summary=TRUE,newdata=newdat,scale = &#39;response&#39;,re_formula=NA) ## Estimate Est.Error Q2.5 Q97.5 ## [1,] 0.5661154 0.1563952 0.2212366 0.8396047 ## [2,] 0.5958201 0.1562524 0.2413899 0.8598464 Fortunately, we see that both methods give identical estimates. 5.2 Beta zero one inflated model We now move to a slightly more complicated model: a beta regression with zero-one inflation. Assume we have a 40% chance of having inflation, which in turn in 80% of the cases implies a 0 and in 20% of the cases a 1.The following code simply simulates some data for our model to fit on: set.seed(456) N &lt;- 50 Ni &lt;- 10 x &lt;- rnorm(N) id &lt;- sample(Ni,N,replace=TRUE) id.f &lt;- factor(id) id.vals &lt;- rnorm(Ni) lin.y &lt;- x + id.vals[id] p.y &lt;- plogis(lin.y) beta.var &lt;- 0.04 # convert according to wikipedia # maybe not the most professional source # but didn&#39;t have time to rederive right now # (nor to look up a better source) shape.1 &lt;- p.y*(p.y*(1-p.y)/beta.var -1) shape.2 &lt;- (1-p.y)*(p.y*(1-p.y)/beta.var -1) y.std &lt;- rbeta(N,1,shape.1,shape.2) # now add zero-one inflation: y &lt;- ifelse(runif(N)&lt;0.4,as.numeric(runif(N)&gt;0.8),y.std) d &lt;- data.frame(x=x,y=y,id=id.f) plot(x,y) Now we move to the analysis, first we are naive and we simply try the logistic transformation of the predictions: # 2. A beta zero one inflated model with random effect m2 &lt;- brm(y~x+(1|id),family=zero_one_inflated_beta, warmup=1000, iter=2000, data=d, backend=&quot;cmdstanr&quot;, file=&quot;BRMS_beta_zero_one&quot;) # data points for which we want predictions: newdat &lt;- data.frame(x=c(0.3,0.4),id=&#39;1&#39;) # predictions on linear scale m2.fit.lin &lt;- fitted(m2,summary=FALSE,newdata=newdat,scale = &#39;linear&#39;,re_formula=NA) # define a function for getting estimate, se and 95% CI sum.fun &lt;- function(x) c(mu=mean(x),sd=sd(x),quantile(x,probs=c(0.025,0.975))) # apply function for each row in newdat t(apply(plogis(m2.fit.lin),2,sum.fun)) ## mu sd 2.5% 97.5% ## [1,] 0.5763428 0.08192093 0.4108652 0.7336134 ## [2,] 0.5653001 0.08322229 0.3990678 0.7266214 # taking them directly from brms fitted(m2,summary=TRUE,newdata=newdat,scale = &#39;response&#39;,re_formula=NA) ## Estimate Est.Error Q2.5 Q97.5 ## [1,] 0.4103261 0.06361266 0.2858994 0.5397669 ## [2,] 0.4035142 0.06396549 0.2802933 0.5333942 Now, the two are different, simply because we have not applied the zero one inflation. Let us now try to extract these values: # extract chances of zero one inflation and conditional chance of one from the model: p.zoi &lt;- as_draws_array(m2,variable = c(&#39;zoi&#39;)) p.coi &lt;- as_draws_array(m2,variable = c(&#39;coi&#39;)) # define a function for getting estimate, se and 95% CI sum.fun.zoi &lt;- function(x){ x.corrected &lt;- x*(1-p.zoi) + p.zoi*p.coi c(mu=mean(x.corrected),sd=sd(x.corrected),quantile(x.corrected,probs=c(0.025,0.975))) } # apply function for each row in newdat t(apply(plogis(m2.fit.lin),2,sum.fun.zoi)) ## mu sd 2.5% 97.5% ## [1,] 0.4103261 0.06361266 0.2858994 0.5397669 ## [2,] 0.4035142 0.06396549 0.2802933 0.5333942 # taking them directly from brms fitted(m2,summary=TRUE,newdata=newdat,scale = &#39;response&#39;,re_formula=NA) ## Estimate Est.Error Q2.5 Q97.5 ## [1,] 0.4103261 0.06361266 0.2858994 0.5397669 ## [2,] 0.4035142 0.06396549 0.2802933 0.5333942 And now they are identical indeed, as expected! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
